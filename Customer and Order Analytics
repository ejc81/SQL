-- In this SQL, I'm querying a database with multiple tables in it to quantify statistics about customer and order data. 

-- How many orders were placed in January? 

SELECT COUNT(orderID) FROM BIT_DB.JanSales 
    WHERE LENGTH(orderID) = 6 
    AND orderID <> 'Order ID'
    AND orderID <> ' ';

-- How many of those orders were for an iPhone?

SELECT COUNT(orderID) FROM BIT_DB.JanSales 
    WHERE Product = "iPhone"
    AND LENGTH(orderID) = 6 
    AND orderID <> 'Order ID'
    AND orderID <> ' ';

-- Select the customer account numbers for all the orders that were placed in February.

SELECT * FROM BIT_DB.FebSales;

SELECT * FROM BIT_DB.customers;

SELECT DISTINCT customers.acctnum FROM BIT_DB.customers 
    INNER JOIN BIT_DB.FebSales 
    ON customers.order_id = FebSales.orderID
    WHERE LENGTH(orderID) = 6 
    AND orderID <> 'Order ID'
    AND orderID <> ' ';
    
-- Which product was the cheapest one sold in January, and what was the price?

SELECT * FROM BIT_DB.JanSales LIMIT 20;

SELECT DISTINCT product, MIN(price) FROM BIT_DB.JanSales
    GROUP BY product, price
    ORDER BY price ASC LIMIT 1; 

-- What is the total revenue for each product sold in January? 

SELECT * FROM BIT_DB.JanSales;

SELECT product, ROUND(SUM(Quantity) * price, 2) AS revenue FROM BIT_DB.JanSales
    GROUP BY product
    ORDER BY revenue; 

-- Which products were sold in February at 548 Lincoln St, Seattle, WA 98101, how many of each were sold, and what was the total revenue? 

SELECT * FROM BIT_DB.FebSales; 

SELECT product, location, SUM(quantity) AS total_sold, ROUND(SUM(Quantity) * price, 2) AS revenue FROM BIT_DB.FebSales
    WHERE location = "548 Lincoln St, Seattle, WA 98101" 
    GROUP BY product; 

-- How many customers ordered more than 2 products at a time in February, and what was the average amount spent for those customers 

SELECT * FROM BIT_DB.FebSales;

SELECT * FROM BIT_DB.customers; 

SELECT COUNT(customers.acctnum), ROUND(AVG(quantity * price),2) FROM BIT_DB.customers
    LEFT JOIN BIT_DB.FebSales
    ON FebSales.orderID = customers.order_id
    WHERE FebSales.Quantity > 2 
    AND LENGTH(orderID) = 6 
    AND orderID <> 'Order ID'
    AND orderID <> ' ';

-- List all the products sold in Los Angeles in February, and include how many of each were sold 

SELECT * FROM BIT_DB.FebSales; 

SELECT Product, SUM(Quantity) AS total_sold, location FROM BIT_DB.FebSales
    WHERE location LIKE "%Los Angeles%"
    GROUP BY Product;

-- Which locations in New York recieved at least 3 orders in January, and how many orders did they each receive? 

SELECT * FROM BIT_DB.JanSales; 

SELECT location, COUNT(orderID) FROM BIT_DB.JanSales
    WHERE location LIKE "%NY%" 
    AND LENGTH(orderID) = 6
    AND orderID <> "Order ID" 
    AND orderID <> " "
    GROUP BY location 
    HAVING COUNT(orderID) >= 3; 
    
-- How many of each type of headphone were sold in February? 

SELECT * FROM BIT_DB.FebSales;

SELECT Product, SUM(Quantity) AS total_sold FROM BIT_DB.FebSales 
    WHERE Product LIKE "%Headphone%"
    GROUP BY Product;

-- What was the average amount spent per account in February? 

SELECT * FROM BIT_DB.customers; 

SELECT * FROM BIT_DB.FebSales; 

SELECT ROUND(SUM(FebSales.Quantity*FebSales.price)/COUNT(customers.acctnum),2) AS avg_spent FROM BIT_DB.customers
    LEFT JOIN BIT_DB.FebSales
    ON customers.order_id = FebSales.orderID
    WHERE LENGTH(orderID) = 6 
    AND orderID <> 'Order ID'
    AND orderID <> " "; 
    
-- What was the average quantity of products purchased per account in February?

SELECT * FROM BIT_DB.FebSales; 

SELECT * FROM BIT_DB.customers; 

SELECT SUM(FebSales.Quantity)/COUNT(customers.acctnum) AS avg_quantity FROM BIT_DB.FebSales
    LEFT JOIN BIT_DB.customers
    ON FebSales.orderID = customers.order_id
    WHERE LENGTH(orderID) = 6 
    AND orderID <> 'Order ID'
    AND orderID <> " "; 
    
-- Which product brought in the most revenue in January and how much revenue did it bring in total?

SELECT * FROM BIT_DB.JanSales;

SELECT Product, ROUND(SUM(Quantity)* price,2) AS total_revenue FROM BIT_DB.JanSales
    GROUP BY Product
    ORDER BY total_revenue DESC LIMIT 1;


